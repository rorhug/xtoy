// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique @db.Citext
  username       String?  @unique @db.Citext
  hashedPassword String?
  role           String   @default("USER")

  tokens          Token[]
  sessions        Session[]
  spotifyAccounts SpotifyAccount[]
  trackPlays      TrackPlay[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model SpotifyAccount {
  id Int @id @default(autoincrement())

  spotifyAccountId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessToken     String
  refreshToken    String
  scopes          String[]
  accessExpiresAt DateTime
  cachedProfile   Json

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

enum MusicType {
  TRACK
  ARTIST
  ALBUM
}

model MusicItem {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kind      MusicType
  spotifyId String
  // appleId   String

  spotifyBlob    Json
  odesliResponse Json?

  // @@index([appleId])
  trackPlays TrackPlay[]

  @@unique([kind, spotifyId])
  @@index([spotifyId])
}

enum TrackPlaySource {
  PLAYER
  HISTORY
}

model TrackPlay {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  source TrackPlaySource

  musicItemId Int
  musicItem   MusicItem @relation(fields: [musicItemId], references: [id])

  context Json?

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
